/*
 * Copyright 2002-2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

HEADERS = @{

	#include <shared/error.h>
	#include <shared/xalloc.h>

	#include "lctlexer.h"
	#include "lctsyntax.h"

	typedef int ZTTERMINAL;

	int curr_lct_token;
	int saved_lct_token;

	char lct_tokbuf[2000];
	static char *lct_token_end = lct_tokbuf + sizeof lct_tokbuf;
	static char *lct_token_current;

	char *lct_token_string;

	struct lct_state lct_state;

	static int
	lexi_getchar(struct lct_state *state)
	{
		int c;

		c = fgetc(state->input);

		if (c == EOF) {
			return LEXI_EOF;
		}

		if (c == '\n') {
			crt_line_no++;
		}

		return c;
	}

@} , @{

	#include <stdio.h>

	#include "lctsyntax.h"

	typedef FILE *FILE_P_lct;

	extern char lct_tokbuf[];
	extern int curr_lct_token;
	extern int saved_lct_token;
	extern struct lct_ast lct_ast;

	extern struct lct_state lct_state;
	extern char *lct_token_string;

	#define CURRENT_LCT_TERMINAL curr_lct_token
	#define ADVANCE_LCT_LEXER    curr_lct_token = lct_next(&lct_state)
	#define SAVE_LCT_LEXER(T)    (saved_lct_token = curr_lct_token, curr_lct_token = (T))
	#define RESTORE_LCT_LEXER    (curr_lct_token = saved_lct_token)

@};

TRAILERS = @{
@},@{
@};

ARGUMENT input :FILE_P_lct;

ACTION init_tokbuf = @{
	lct_token_current = lct_tokbuf;
@};

ACTION push_tokbuf: (c :CHARACTER) -> () = @{
	if (lct_token_current == lct_token_end - 1) {
		error(ERR_FATAL, "Buffer overflow");
	} else {
		*lct_token_current++ = @c;
	}
@};

ACTION fini_tokbuf = @{
	if (lct_token_current == lct_token_end) {
		error(ERR_FATAL, "Buffer overflow: trailing 0");
		*(lct_token_end - 1) = 0;
	} else {
		*lct_token_current++ = 0;
	}
@};

ACTION keyword: (ti :TERMINAL) -> (to :TERMINAL) = @{
	@to = lct_keyword(lct_tokbuf, @ti);
@};

ACTION code_string: (c :CHARACTER) -> (a :TERMINAL) = @{
	size_t z, i;
	char *p;
	int c;

	z = 1024; /* arbitary non-zero initial size */
	p = NULL;
	i = 0;

	c = @c;

	do {
		if (p == NULL || i == z) {
			z *= 2;
			p = xrealloc(p, z);
		}

		p[i++] = c;

		c = lct_readchar(&lct_state);
	} while (c != '@@' && c != LEXI_EOF);

	lct_token_string = xrealloc(p, i + 1);
	lct_token_string[i] = '\0';

	@a = lct_code_Hstring;

	lct_push(&lct_state, c);
@};

