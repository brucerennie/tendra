/*
 * Copyright 2002-2011, The TenDRA Project.
 *
 * See doc/copyright/ for the full copyright terms.
 */

HEADERS = @{

	#include <stdio.h>
	#include <string.h>
	#include <ctype.h>

	#include <shared/error.h>
	#include <shared/xalloc.h>

	#include "lexer.h"
	#include "syntax.h"

	struct lxi_state lxi_state;

	typedef int ZTTERMINAL;

	/*
	 * This buffer is used to hold the values of identifiers and strings.
	 */
	char tokbuf[2000];
	char *token_end = tokbuf + sizeof tokbuf;
	static char *token_current;
	unsigned int numbuf;

	/*
	 * CURRENT TOKEN
	 *
	 * These variables are used by the parser to hold the current and former
	 * lexical tokens.
	 */
	int curr_lex_token;
	int saved_lex_token;

	#define lexi_unknown lxi_unknown

	/*
	 * GET THE NEXT CHARACTER
	 *
	 * This routine reads the next character, either from the pending buffer
	 * or from the input file.
	 */
	static int
	lexi_getchar(struct lxi_state *state)
	{
		int c;

		c = fgetc(state->input);

		if (c == EOF) {
			return LEXI_EOF;
		}

		if (c == '\n') {
			crt_line_no++;
		}

		c &= 0xff; /* XXX: why? */

		return c;
	}

@}, @{

	extern char tokbuf[];
	extern char *token_end;
	extern int curr_lex_token;
	extern int saved_lex_token;
	extern unsigned int numbuf;
	extern struct lxi_state lxi_state;

	typedef FILE *FILE_P;

	#define CURRENT_LXI_TERMINAL curr_lex_token
	#define ADVANCE_LXI_LEXER    curr_lex_token = lxi_next(&lxi_state)
	#define SAVE_LXI_LEXER(T)    (saved_lex_token = curr_lex_token, curr_lex_token = (T))
	#define RESTORE_LXI_LEXER    (curr_lex_token = saved_lex_token)

@};

TRAILERS = @{
@},@{
@} ;

ARGUMENT input :FILE_P;

ACTION init_tokbuf = @{
	token_current=tokbuf;
@};

ACTION push_tokbuf: (c :CHARACTER) -> () = @{
	if (token_current == token_end - 1) {
		error(ERR_FATAL, "Buffer overflow");
	} else {
		*token_current++ = @c;
	}
@};

ACTION fini_tokbuf = @{
	if (token_current == token_end) {
		error(ERR_FATAL, "Buffer overflow: trailing 0");
		*(token_end-1) = 0;
	} else {
		*token_current++ = 0;
	}
@};

ACTION keyword: (ti :TERMINAL) -> (to :TERMINAL) = @{
	@to = lxi_keyword(tokbuf, @ti);
@};

ACTION E_eof_in_string = @{
	error(ERR_SERIOUS, "Unexpected eof in string");
@};

ACTION E_newline_in_string = @{
	error(ERR_SERIOUS, "Unexpected newline in string");
@};

ACTION numbuf_init: () -> () = @{
	numbuf = 0;
@};

ACTION numbuf_push_digit: (c :CHARACTER) -> () = @{
	numbuf *= 10;
	numbuf += @c - '0';
@};

